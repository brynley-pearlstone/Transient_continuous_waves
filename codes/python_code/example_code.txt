
m __future__ import division
import numpy as np
import matplotlib as mpl
from gwpy.plotter import SpectrumPlot
from gwpy.plotter import TimeSeriesPlot
from gwpy.spectrum import Spectrum
from gwpy.timeseries import TimeSeries
from argparse import ArgumentParser
import inspect
import os
import datetime
mpl.rcParams['agg.path.chunksize'] = 10000
import matplotlib.pyplot as plt
mpl.use('Agg')


parser = ArgumentParser()

# The format for these config files is as follows: "channel", lowcut freq and highcut freq must
# be specified for each entry in the file. Each entry will introduce a new trace to the
# output plot. The parameters should be separated by a space.
# Channel~lowcut freq~highcut freq

parser.add_argument("-o", "--output", dest = "output",
                  help = "Output directory path.", metavar = "O_PATH", default='BLRMS_out')
parser.add_argument("-s", "--start", dest = "start",
                  help = "GPS Start Time", metavar = "NUMBER")
parser.add_argument("-R", "--Ref", dest = "ref",
                  help = "Reference channel name", metavar = "STRING")
parser.add_argument("-C", "--Comp", dest = "comp",
                  help = "Comparison channel name", metavar = "STRING")
parser.add_argument("-t", "--resolution", dest  = "resolution",
                  help = "Time resolution of BLRMS output in seconds", metavar = "NUMBER", default = 30)

parser.add_argument("-r", "--ref_in", dest = "ref_in",
                  help = "Path to list of ref values.", metavar = "I_PATH")
parser.add_argument("-c", "--comp_in", dest = "comp_in",
                  help = "Path to list of comp values.", metavar = "I_PATH")

args = parser.parse_args()
output = args.output
if output[-1] != '/':
        output += '/'
if not os.path.exists(output):
        os.makedirs(output)
        print(output + ' created.')

start = float(args.start)
dt = float(args.resolution)
out_file = open(output + 'coherence.txt', 'w+')
out_file.seek(0)
out_file.truncate()
plt.figure(1)

ref_name = str(args.ref)
comp_name = str(args.comp)

ref_input = str(args.ref_in)
ref_file = open(ref_input)
filelist = list(enumerate(ref_file))
ref_file.seek(0)
ref_BLRMS = [0 for item in filelist]
ref_sq = [0 for item in filelist]
ref_file.seek(0)

comp_input = str(args.comp_in)
comp_file = open(comp_input)
c_filelist = list(enumerate(comp_file))
comp_file.seek(0)
comp_BLRMS = [0 for item in c_filelist]
comp_sq = [0 for item in c_filelist]
BLRMS_time = [0 for item in c_filelist]
comp_file.seek(0)
cross_BLRMS = [0 for item in c_filelist]
cross_sq =  [0 for item in c_filelist]
coherence = [0 for item in c_filelist]
statistic = [0 for item in c_filelist]

try:
        len(ref_BLRMS) - len(comp_BLRMS) == 0
except NUM_ERROR:
        print("Length mismatch")

for count, item in enumerate(ref_file):
        ref_BLRMS[count] = float(item.strip('\n'))
        BLRMS_time[count] = start + (count*dt)

for count, item in enumerate(comp_file):
        comp_BLRMS[count] = float(item.strip('\n'))
        statistic[count] = ref_BLRMS[count] * comp_BLRMS[count]/comp_BLRMS[0]

for count in range(len(statistic)):
        out_file.write(str(statistic[count]) + "\n")

plt.clf()

plt.plot(BLRMS_time, statistic)
plt.xlabel('Time (GPS s)')
plt.ylabel('BLRMS DARM x Aux')
plt.ylim([0,1e-10])
plt.grid(True)
plt.title( ref_name + " and " + comp_name)
plt.savefig(output +  "coherence_BLRMS.png")



